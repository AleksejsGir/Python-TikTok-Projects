# -*- coding: utf-8 -*-

"""
Пример использования Playwright для заполнения форм.

Этот скрипт демонстрирует:
- Заполнение текстовых полей
- Выбор опций из выпадающих списков
- Отметку чекбоксов
- Нажатие на кнопки
- Отправку форм

Заполнение форм - одна из самых частых задач при автоматизации браузера.
Этот пример показывает, как автоматизировать заполнение типичной регистрационной формы.
"""

# Импортируем необходимые библиотеки
from playwright.sync_api import sync_playwright
import time


def run(playwright):
    """
    Основная функция для демонстрации заполнения формы с Playwright.

    Параметр playwright предоставляет доступ к браузерам.
    """
    # Запускаем браузер Chromium с видимым интерфейсом
    # headless=False позволяет видеть, что происходит в браузере
    browser = playwright.chromium.launch(headless=False)

    # Создаем новую страницу в браузере
    page = browser.new_page()

    # ---- Открытие веб-страницы с формой ----

    # Переходим на сайт с демонстрационной формой
    # Эта страница содержит разные типы полей ввода для тестирования
    page.goto("https://demoqa.com/automation-practice-form")

    # ---- Заполнение текстовых полей ----

    # Находим поле для ввода имени по ID и заполняем его
    # input#firstName - это CSS-селектор, означающий "тег input с id='firstName'"
    # locator() находит элемент, а fill() заполняет его текстом
    page.locator('input#firstName').fill("Алексей")

    # Заполняем поле для фамилии
    page.locator('input#lastName').fill("Программист")

    # Заполняем поле для email
    # Обратите внимание, что метод fill() может заполнить любое текстовое поле
    page.locator('input#userEmail').fill("example@example.com")

    # ---- Работа с радио-кнопками ----

    # Выбираем радио-кнопку пола
    # Здесь мы кликаем не на сам input (он может быть скрыт), а на его label
    # label[for="gender-radio-1"] - это label, связанный с input id="gender-radio-1"
    # Такая стратегия работает лучше для современных сайтов со сложной версткой
    page.locator('label[for="gender-radio-1"]').click()

    # ---- Заполнение числовых полей ----

    # Заполняем поле для номера телефона
    # Здесь тоже используем селектор по ID
    page.locator('input#userNumber').fill("1234567890")

    # ---- Работа с виджетами выбора даты ----

    # Заполняем поле для даты
    # Для простоты мы просто вводим дату в текстовое поле, а не используем календарь
    # Во многих случаях это работает, если поле принимает текстовый ввод
    page.locator('input#dateOfBirthInput').fill("01 Jan 2000")

    # Нажимаем Enter, чтобы подтвердить ввод даты
    # press() имитирует нажатие клавиши на клавиатуре
    page.press('input#dateOfBirthInput', 'Enter')

    # ---- Работа с полями автокомплита ----

    # Выбираем предметы из автокомплита
    # Сначала начинаем вводить текст в поле
    page.locator('input#subjectsInput').fill("Math")

    # Затем нажимаем Enter, чтобы выбрать первый вариант из выпадающего списка
    # Это стандартный способ работы с полями автокомплита
    page.press('input#subjectsInput', 'Enter')

    # ---- Работа с чекбоксами ----

    # Отмечаем чекбокс для хобби
    # Как и с радио-кнопками, часто проще кликнуть на label, чем на сам чекбокс
    page.locator('label[for="hobbies-checkbox-1"]').click()

    # ---- Загрузка файлов ----

    # Этот код закомментирован, так как требует реального файла на вашем компьютере
    # set_input_files() позволяет загружать файлы через элементы ввода типа 'file'
    # page.locator('input#uploadPicture').set_input_files('/path/to/your/file.jpg')

    # Чтобы использовать эту функцию:
    # 1. Раскомментируйте строку выше
    # 2. Замените '/path/to/your/file.jpg' на реальный путь к файлу на вашем компьютере
    # Например: 'C:/Users/Username/Pictures/photo.jpg' в Windows
    # Или: '/home/username/pictures/photo.jpg' в Linux/Mac

    # ---- Работа с текстовыми областями ----

    # Вводим текст в многострочное текстовое поле
    # textarea - это HTML-тег для многострочных текстовых полей
    page.locator('textarea#currentAddress').fill("123 Python Street, Code City")

    # ---- Создание скриншота заполненной формы ----

    # Делаем скриншот заполненной формы
    # Скриншот будет сохранен в папку '../screenshots/' относительно текущей директории
    page.screenshot(path="../screenshots/filled_form.png")

    # ---- Отправка формы ----

    # В реальном сценарии здесь была бы отправка формы:
    # page.locator('button#submit').click()
    # Закомментировано, чтобы не отправлять тестовые данные на сервер

    # Ждем 3 секунды, чтобы можно было увидеть результат заполнения формы
    time.sleep(3)

    # Закрываем браузер и освобождаем ресурсы
    browser.close()


# Запускаем наш сценарий с Playwright
with sync_playwright() as playwright:
    run(playwright)

# Советы по работе с формами:
#
# 1. Элементы могут быть скрыты или иметь специальные стили:
#    - Для радио-кнопок и чекбоксов часто лучше кликать по связанным label
#    - Для календарей иногда можно просто ввести текст, а не использовать UI
#
# 2. Формы с защитой от ботов:
#    - Некоторые формы имеют reCAPTCHA или другие механизмы защиты
#    - В таких случаях полная автоматизация может быть сложной
#    - Для тестовых целей можно использовать тестовые окружения без защиты
#
# 3. Проверка заполнения:
#    - Чтобы проверить, что форма заполнена правильно, можно:
#      * Сделать скриншот (как в этом примере)
#      * Получить значения полей с помощью .input_value() для input-элементов
#      * Проверить CSS-классы для элементов (например, для проверки ошибок)