# -*- coding: utf-8 -*-

"""
Базовый пример использования Playwright для автоматизации браузера.

Этот скрипт демонстрирует основные функции Playwright:
- Запуск браузера
- Открытие новой страницы
- Переход по URL
- Взаимодействие с элементами страницы
- Получение данных со страницы
"""

# Импортируем Playwright и модуль time для задержки выполнения
from playwright.sync_api import sync_playwright
import time


def run(playwright):
    """
    Основная функция для демонстрации возможностей Playwright.

    Параметр playwright - это объект, полученный от sync_playwright(),
    который предоставляет доступ к браузерам.
    """
    # Запускаем браузер (можно выбрать chromium, firefox или webkit)
    # headless=False означает, что мы увидим графический интерфейс браузера
    # По умолчанию headless=True - браузер работает в фоновом режиме
    browser = playwright.chromium.launch(headless=False)

    # Создаем новую страницу (вкладку) в браузере
    # page - это основной объект для взаимодействия с веб-сайтами
    page = browser.new_page()

    # Переходим на указанный сайт
    # goto автоматически ждет завершения загрузки страницы - не нужны явные time.sleep()
    page.goto("https://www.python.org/")

    # ---- Работа с данными на странице ----

    # Получаем и выводим заголовок страницы (текст в теге <title>)
    title = page.title()
    print(f"Заголовок страницы: {title}")

    # ---- Взаимодействие с элементами страницы ----

    # Находим поле поиска на сайте Python.org используя локатор
    # Локатор - это способ найти элемент на странице, похож на CSS-селектор
    # 'input[name="q"]' означает: найти тег input с атрибутом name="q"
    search_input = page.locator('input[name="q"]')

    # Вводим текст в поле поиска
    # fill() - это метод для заполнения текстовых полей, имитирует ввод с клавиатуры
    search_input.fill("Playwright")

    # Нажимаем кнопку поиска
    # click() - имитирует клик мыши по элементу
    # Здесь мы находим кнопку с типом "submit" и кликаем по ней
    page.locator('button[type="submit"]').click()

    # Playwright автоматически дождется загрузки результатов поиска
    # Не нужно писать явные ожидания типа time.sleep()

    # ---- Сбор данных с веб-страницы ----

    # Получаем список результатов поиска
    # .list-recent-events li находит все элементы li внутри контейнера с классом list-recent-events
    results = page.locator(".list-recent-events li")

    # Подсчитываем количество найденных элементов
    # count() возвращает количество элементов, соответствующих локатору
    count = results.count()

    print(f"Найдено результатов: {count}")

    # Выводим первые 5 результатов (если они есть)
    # min(5, count) возвращает минимальное из двух чисел, чтобы не выйти за границы массива
    for i in range(min(5, count)):
        # nth(i) выбирает элемент с индексом i из коллекции элементов
        # inner_text() получает текстовое содержимое элемента (без HTML-тегов)
        # strip() удаляет лишние пробелы и переносы строк
        result_text = results.nth(i).inner_text()
        print(f"{i + 1}. {result_text.strip()}")

    # ---- Создание скриншота ----

    # Делаем скриншот страницы
    # path="../screenshots/search_results.png" - путь относительно текущей директории
    # ../screenshots/ означает "папка screenshots в родительской директории"
    page.screenshot(path="../screenshots/search_results.png")

    # Даем время пользователю, чтобы увидеть результат в браузере
    # time.sleep() останавливает выполнение скрипта на указанное количество секунд
    time.sleep(3)

    # Закрываем браузер и освобождаем ресурсы
    browser.close()


# Используем контекстный менеджер для автоматического закрытия браузера в конце
# with обеспечивает правильное закрытие ресурсов даже при возникновении ошибок
with sync_playwright() as playwright:
    run(playwright)

# Советы для новичков:
# 1. Если элемент не находится, попробуйте другой локатор
#    - Откройте инструменты разработчика в браузере (F12)
#    - Найдите нужный элемент и изучите его HTML-структуру
#    - Попробуйте использовать более специфичный локатор
#
# 2. Отладка:
#    - Добавьте page.pause() перед проблемным местом, чтобы остановить выполнение
#    - Используйте print() для вывода промежуточных результатов
#    - Добавьте time.sleep(5) перед сложными операциями, чтобы замедлить скрипт
#
# 3. Относительные пути:
#    - "../screenshots/" - папка в родительской директории
#    - "./screenshots/" или просто "screenshots/" - папка в текущей директории